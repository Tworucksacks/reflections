
When would you want to use a remote repository rather than keeping all your work
local?

A remote repository helps when you are working with other people or from
multiple machines. It also doubles as a handy offsite backup :-)

***

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

It would get very confusing if your local repository kept adding new commits
behind the scenes all the time.

***

Describe the differences between forks, clones, and branches. When would you
use one instead of the other?

A fork is when you take a copy of somebodies repository on Github that you
want to work on and develop separately while still acknowledging their initial
work. With a fork you can't push to the original repository.
A clone is when you copy an existing repository with the ability to push commits
 back to it. You automatically get a remote link to it and can contribute
changes if desired.
A branch is a copy of an existing commit within your repository which allows you
to experiment with the code without impacting the master branch. You can then
decide if you want to add the code back in or discard it.

***

What is the benefit of having a copy of the last known state of the remote
stored locally?

This allows you to look at the changes made remotely without impacting your
current code. You can switch to these commits to test them. You can also diff
to see the changes made. Additionally it allows you to work offline.

***

How would you collaborate without using Git or GithHub? What would be easier,
and what would be harder?

You would need to use enails and send files around. Somebody would have to be
responsible for maintaining a master version of all the files. It might be
easier if you could just send your files off to someone else and it would be
their responsibility to do the merging. It would be much harder coordinating
all the changes and trying to get a master version to work off.

***

When would you want to make changes in a separate branch rather than directly
in master? What benefit does each approach have?

Making changes in a separate branch allows to complete your work without
worrying what other people are doing in master. You can just do a final diff at
the end and bring it all together. Working just in master would make it easier
to merge things, but potentially would end up in a bigger mess as some point.

***
